apply plugin: 'application'
apply plugin: 'protobuf'

description = "grpc Examples"

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath libraries.protobuf_plugin
    }
}

dependencies {
    compile project(':grpc-core'),
            project(':grpc-netty'),
            project(':grpc-okhttp'),
            project(':grpc-stub'),
            libraries.jsonp
}

protobufCodeGenPlugins = ["java_plugin:$javaPluginPath"]
generateProto.dependsOn ':grpc-compiler:java_pluginExecutable'

task routeGuideServer(type: JavaExec) {
    main = "io.grpc.examples.routeguide.RouteGuideServer"
    description = "Executes the route guide server."
    classpath = sourceSets.main.runtimeClasspath
}

task routeGuideClient(type: JavaExec) {
    main = "io.grpc.examples.routeguide.RouteGuideClient"
    description = "Executes the route guide client."
    classpath = sourceSets.main.runtimeClasspath
}

task helloWorldServer(type: JavaExec) {
    main = "io.grpc.examples.helloworld.HelloWorldServer"
    description = "Executes the hello world server."
    classpath = sourceSets.main.runtimeClasspath
}

task helloWorldClient(type: JavaExec) {
    main = "io.grpc.examples.helloworld.HelloWorldClient"
    description = "Executes the hello world client."
    classpath = sourceSets.main.runtimeClasspath
}

//My_helloworld code added 

task My_helloWorldServer(type: JavaExec) {
    main = "io.grpc.examples.My_helloworld.My_HelloWorldServer"
    description = "Executes the My hello world server."
    classpath = sourceSets.main.runtimeClasspath
}

task My_helloWorldClient(type: JavaExec) {
    main = "io.grpc.examples.My_helloworld.My_HelloWorldClient"
    description = "Executes the My hello world client."
    classpath = sourceSets.main.runtimeClasspath
}


//trial1 PollClass code added

task PollServerTask(type: JavaExec) {
    main = "io.grpc.examples.trial1.PollServer"
    description = "Executes the Poll server."
    classpath = sourceSets.main.runtimeClasspath
}
task PollClientTask(type: JavaExec) {
    main = "io.grpc.examples.trial1.PollClient"
    description = "Executes the Poll client."
    classpath = sourceSets.main.runtimeClasspath
}


//trial2 
task PollServerTask_trial2(type: JavaExec) {
    main = "io.grpc.examples.trial2.PollServer"
    description = "Executes the Poll server."
    classpath = sourceSets.main.runtimeClasspath
}
task PollClientTask_trial2(type: JavaExec) {
    main = "io.grpc.examples.trial2.PollClient"
    description = "Executes the Poll client."
    classpath = sourceSets.main.runtimeClasspath
}

// Lab2 final submission

task PollService_ServerTask(type: JavaExec) {
    main = "edu.sjsu.cmpe273.lab2.PollServer"
//    main = "io.grpc.examples.trial2.PollServer"
    description = "Executes the Poll server."
    classpath = sourceSets.main.runtimeClasspath
}
task PollService_ClientTask_trial2(type: JavaExec) {
    main = "edu.sjsu.cmpe273.lab2.PollClient"
    description = "Executes the Poll client."
    classpath = sourceSets.main.runtimeClasspath
}


// Allow intellij projects to refer to generated-sources
idea {
    module {
        // The whole build dir is excluded by default, but we need build/generated-sources,
        // which contains the generated proto classes.
        excludeDirs = [file('.gradle')]
        if (buildDir.exists()) {
            excludeDirs += files(buildDir.listFiles())
            excludeDirs -= file("$buildDir/generated-sources")
        }
    }
}
